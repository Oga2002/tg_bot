import telebot
from telebot import types
from datetime import datetime, timedelta
import time


# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º sqlite3 –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
import sqlite3


role_commands = {
    "—Å–æ—Ç—Ä—É–¥–Ω–∏–∫": [
        ("/tasks", "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á"),
        ("/events", "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å —Å–æ–±—ã—Ç–∏–π"),
        ("/contacts", "–ù–∞–π—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤"),
        ("/faq", "–ü–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç—ã –Ω–∞ —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã")
    ],
    "—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å": [
        ("/tasks", "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á"),
        ("/events", "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å —Å–æ–±—ã—Ç–∏–π"),
        ("/contacts", "–ù–∞–π—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤"),
        ("/reports", "–ü–æ–ª—É—á–∏—Ç—å –æ—Ç—á–µ—Ç—ã –æ —Ö–æ–¥–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á")
    ],
    "–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä": [
        ("/tasks", "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á"),
        ("/events", "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å —Å–æ–±—ã—Ç–∏–π"),
        ("/contacts", "–ù–∞–π—Ç–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤"),
        ("/users", "–£–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"),
        ("/settings", "–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –±–æ—Ç–∞")
    ]
}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot("6955334520:AAHmzsW94i4x442at_XKUhynxNt7kZfe3L0")

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–µ–Ω—é
show_menu = False

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –∏—Ö —Ä–æ–ª–µ–π
user_data = {}
user_role = {}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ–Ω—é –∫–æ–º–∞–Ω–¥ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
def show_employee_menu(chat_id):
    commands_menu = "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
    commands_menu += "/help - –ü–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É\n"
    commands_menu += "/tasks - –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–¥–∞—á–∏\n"
    commands_menu += "/faq - –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã\n"
    commands_menu += "/contacts - –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\n"
    commands_menu += "/events - –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–æ–±—ã—Ç–∏—è\n"
    bot.send_message(chat_id, commands_menu)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ–Ω—é –∫–æ–º–∞–Ω–¥ –¥–ª—è —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è
def show_manager_menu(chat_id):
    commands_menu = "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
    commands_menu += "/help - –ü–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É\n"
    commands_menu += "/tasks - –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–¥–∞—á–∏\n"
    commands_menu += "/faq - –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã\n"
    commands_menu += "/contacts - –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è\n"
    commands_menu += "/events - –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–æ–±—ã—Ç–∏—è\n"
    bot.send_message(chat_id, commands_menu)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def start(message):
    if not user_role:
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (username):")
        bot.register_next_step_handler(message, authenticate_username)
    else:
        bot.send_message(message.chat.id, "–í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã")
        if user_role['role'] == "—Å–æ—Ç—Ä—É–¥–Ω–∏–∫":
            show_employee_menu(message.chat.id)
        elif user_role['role'] == "—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å":
            show_manager_menu(message.chat.id)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def authenticate_user(username, password):
    try:
        connection = sqlite3.connect("tg_bot.db")
        cursor = connection.cursor()
        cursor.execute("SELECT id, first_name, last_name, role FROM users WHERE username = ? AND password = ?", (username, password))
        user = cursor.fetchone()
        cursor.close()
        connection.close()
        return user  # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ç–µ–∂ (id, first_name, last_name, role) –∏–ª–∏ None, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")
        return None

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def authenticate_username(message):
    username = message.text.strip()
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å:")
    bot.register_next_step_handler(message, lambda msg: authenticate_password(msg, username))

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å–ø–µ—à–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
def successful_authentication(message, user):
    global user_role  # –û–±—ä—è–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é user_role –∫–∞–∫ –≥–ª–æ–±–∞–ª—å–Ω—É—é
    user_id, first_name, last_name, role = user
    bot.send_message(message.chat.id, f"–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {first_name} {last_name}! –í–∞—à–∞ —Ä–æ–ª—å: {role}.")
    user_role = {'user_id': user_id, 'role': role, 'name': first_name + " " + last_name, 'tg_id': message.from_user.id}
    print(user_role)
    if user_role['role'] == "—Å–æ—Ç—Ä—É–¥–Ω–∏–∫":
        show_employee_menu(message.chat.id)
    elif user_role['role'] == "—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å":
        show_manager_menu(message.chat.id)

    # –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤–∫–ª—é—á–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
    # –ó–∞–ø—É—Å–∫ —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
    while True:
        track_new_tasks()
        time.sleep(10)  # –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–∞—Ä–æ–ª—è
def authenticate_password(message, username):
    password = message.text.strip()
    user = authenticate_user(username, password)
    if user:
        successful_authentication(message, user)  # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    else:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
@bot.message_handler(commands=['help'])
def help(message):
    try:
        role = user_role["role"]
        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø–æ–º–æ—â–∏
        help_text = "–Ø –º–æ–≥—É –ø–æ–º–æ—á—å —Ç–µ–±–µ —Å–æ —Å–ª–µ–¥—É—é—â–∏–º–∏ –∑–∞–¥–∞—á–∞–º–∏:\n\n"
        for command in role_commands[role]:
            help_text += f"{command} - ...\n"
        bot.send_message(message.chat.id, help_text)
    except KeyError:
        bot.send_message(message.chat.id, "–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–º–∞–Ω–¥–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è.")



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /events
@bot.message_handler(commands=['events'])
def events(message):
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    events = get_events()

    if events:
        # –£–¥–∞–ª—è–µ–º –ø—Ä–æ—à–µ–¥—à–∏–µ —Å–æ–±—ã—Ç–∏—è
        remove_expired_events()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Å—Ç–∞–≤—à–∏–º–∏—Å—è —Å–æ–±—ã—Ç–∏—è–º–∏
        remaining_events = get_events()
        if remaining_events:
            bot.send_message(message.chat.id, "–°–ø–∏—Å–æ–∫ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —Å–æ–±—ã—Ç–∏–π:")
            for event in remaining_events:
                event_info = f"üìÖ *{event[1]}*\n\n_{event[2]}_\n\nüïí *–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è:* {event[3]}\nüìç *–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:* {event[4]}"
                bot.send_message(message.chat.id, event_info, parse_mode='Markdown')
        else:
            bot.send_message(message.chat.id, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ—Ç –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —Å–æ–±—ã—Ç–∏–π.")
    else:
        bot.send_message(message.chat.id, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ—Ç –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —Å–æ–±—ã—Ç–∏–π.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å–æ–±—ã—Ç–∏–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def get_events():
    try:
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        connection = sqlite3.connect("tg_bot.db")
        cursor = connection.cursor()

        # –ó–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π
        cursor.execute("SELECT * FROM events")
        events = cursor.fetchall()

        # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        cursor.close()
        connection.close()

        return events
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å–æ–±—ã—Ç–∏–π: {e}")
        return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ—à–µ–¥—à–∏—Ö —Å–æ–±—ã—Ç–∏–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def remove_expired_events():
    try:
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        connection = sqlite3.connect("tg_bot.db")
        cursor = connection.cursor()

        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏, –ø—Ä–æ—à–µ–¥—à–µ–≥–æ –Ω–∞ –æ–¥–∏–Ω –¥–µ–Ω—å
        one_day_ago = datetime.now() - timedelta(days=1)

        # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π, —É –∫–æ—Ç–æ—Ä—ã—Ö date_time –ø—Ä–æ—à–µ–ª –Ω–∞ –æ–¥–∏–Ω –¥–µ–Ω—å –∏–ª–∏ –±–æ–ª–µ–µ
        cursor.execute("DELETE FROM events WHERE date_time < ?", (one_day_ago,))
        connection.commit()

        # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        cursor.close()
        connection.close()

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–æ—à–µ–¥—à–∏—Ö —Å–æ–±—ã—Ç–∏–π: {e}")

@bot.message_handler(commands=['contacts'])
def contacts(message):
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –∏–º–µ–Ω–∏ –∏ —Ñ–∞–º–∏–ª–∏–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤):")

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    bot.register_next_step_handler(message, find_contact)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ø–æ –∏–º–µ–Ω–∏ –∏ —Ñ–∞–º–∏–ª–∏–∏
def find_contact(message):
    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    name = message.text.strip()

    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    connection = sqlite3.connect("tg_bot.db")
    cursor = connection.cursor()

    # –ò—â–µ–º –∫–æ–Ω—Ç–∞–∫—Ç—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –ø–æ –∏–º–µ–Ω–∏ –∏ —Ñ–∞–º–∏–ª–∏–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ –ö–æ–Ω—Ç–∞–∫—Ç—ã
    cursor.execute("SELECT first_name, last_name, email, phone FROM contacts WHERE first_name || ' ' || last_name LIKE ?", ('%' + name + '%',))
    contacts_entries = cursor.fetchall()

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
    if contacts_entries:
        response = "–ù–∞–π–¥–µ–Ω–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:\n\n"
        for first_name, last_name, email, phone in contacts_entries:
            response += f"–ò–º—è: {first_name} {last_name}\nEmail: {email}\n–¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n\n"
    else:
        response = "–ö–æ–Ω—Ç–∞–∫—Ç—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    bot.send_message(message.chat.id, response)

    # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    cursor.close()
    connection.close()


@bot.message_handler(commands=['tasks'])
def tasks(message):
    if user_role['role'] == "—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å":
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        tasks = get_tasks1()

        if tasks:
            response = "–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á:\n"
            for task in tasks:
                task_info = f" *–ù–∞–∑–≤–∞–Ω–∏–µ:* {task[2]}\n\n_{task[3]}_\n\n *–°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:* {task[4]}\n *–°—Ç–∞—Ç—É—Å:* {task[5]}\n\n"
                response += task_info
            bot.send_message(message.chat.id, response)
        else:
            bot.send_message(message.chat.id, "–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø—É—Å—Ç.")

    elif user_role['role'] == "—Å–æ—Ç—Ä—É–¥–Ω–∏–∫":
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        tasks = get_tasks2()

        if tasks:
            response = "–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á:\n"
            for task in tasks:
                task_info = f"üìù *–ù–∞–∑–≤–∞–Ω–∏–µ:* {task[2]}\n\n_{task[3]}_\n\nüïí *–°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:* {task[4]}\nüìå *–°—Ç–∞—Ç—É—Å:* {task[5]}\n\n"
                response += task_info
            bot.send_message(message.chat.id, response, parse_mode="Markdown")

            # –ü—Ä–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—ã–±—Ä–∞—Ç—å –∑–∞–¥–∞—á—É
            bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –µ–µ —Å—Ç–∞—Ç—É—Å:")
            show_task_buttons(message, tasks)
        else:
            bot.send_message(message.chat.id, "–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø—É—Å—Ç.")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫ —Å –≤—ã–±–æ—Ä–æ–º –∑–∞–¥–∞—á–∏
def show_task_buttons(message, tasks):
    keyboard = types.InlineKeyboardMarkup()
    for task in tasks:
        keyboard.add(types.InlineKeyboardButton(text=task[2], callback_data=f"select_task:{task[0]}"))
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É:", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∑–∞–¥–∞—á–∏
@bot.callback_query_handler(func=lambda call: call.data.startswith("select_task"))
def select_task(call):
    try:
        task_id = int(call.data.split(":")[1])
        user_id = user_role['user_id']

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–∞–∫–∞—è –∑–∞–¥–∞—á–∞ —É –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        connection = sqlite3.connect("tg_bot.db")
        cursor = connection.cursor()
        cursor.execute("SELECT * FROM tasks WHERE id = ? AND user_id = ?", (task_id, user_id))
        task = cursor.fetchone()
        cursor.close()
        connection.close()

        if task:
            # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –∑–∞–¥–∞—á—É –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
            user_data[call.message.chat.id] = {"task_id": task_id}

            # –ü—Ä–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—ã–±—Ä–∞—Ç—å –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
            bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –¥–ª—è –∑–∞–¥–∞—á–∏:",
                             reply_markup=create_status_keyboard())
        else:
            bot.send_message(call.message.chat.id, "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å —ç—Ç—É –∑–∞–¥–∞—á—É.")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∑–∞–¥–∞—á–∏: {e}")
        bot.send_message(call.message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∑–∞–¥–∞—á–∏.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏ —Å—Ç–∞—Ç—É—Å–æ–≤
def create_status_keyboard():
    keyboard = types.InlineKeyboardMarkup()
    for status in ["–í –ø—Ä–æ—Ü–µ—Å—Å–µ", "–í—ã–ø–æ–ª–Ω–µ–Ω–∞", "–û—Ç–ª–æ–∂–µ–Ω–∞", "–û—Ç–º–µ–Ω–µ–Ω–∞", "–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è", "–ù–∞ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏"]:
        keyboard.add(types.InlineKeyboardButton(text=status, callback_data=f"change_status:{status}"))
    return keyboard

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏
@bot.callback_query_handler(func=lambda call: call.data.startswith("change_status"))
def change_status(call):
    try:
        new_status = call.data.split(":")[1]
        task_id = user_data.get(call.message.chat.id, {}).get("task_id")

        if task_id:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            connection = sqlite3.connect("tg_bot.db")
            cursor = connection.cursor()
            cursor.execute("UPDATE tasks SET status = ? WHERE id = ?", (new_status, task_id))
            connection.commit()
            cursor.close()
            connection.close()

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞
            bot.send_message(call.message.chat.id, f"–°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {new_status}.")
        else:
            bot.send_message(call.message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é –∑–∞–¥–∞—á—É.")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏: {e}")
        bot.send_message(call.message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏.")



def get_tasks1():
    try:
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        connection = sqlite3.connect("tg_bot.db")
        cursor = connection.cursor()

        # –ó–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á
        cursor.execute("SELECT * FROM tasks")
        tasks = cursor.fetchall()

        # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        cursor.close()
        connection.close()

        return tasks
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á: {e}")
        return None

def get_tasks2():
    try:
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        connection = sqlite3.connect("tg_bot.db")
        cursor = connection.cursor()

        # –ó–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞—á
        cursor.execute(f"SELECT * FROM tasks WHERE user_id = {user_role['user_id']}")
        tasks = cursor.fetchall()

        # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        cursor.close()
        connection.close()

        return tasks
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á: {e}")
        return None

@bot.message_handler(commands=['faq'])
def faq(message):
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    connection = sqlite3.connect("tg_bot.db")
    cursor = connection.cursor()

    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç—ã –Ω–∞ —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏–∑ —Ç–∞–±–ª–∏—Ü—ã FAQ
    cursor.execute("SELECT question, answer FROM FAQ")
    faq_entries = cursor.fetchall()

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É /faq
    response = "–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã:\n\n"
    for question, answer in faq_entries:
        response += f"–í–æ–ø—Ä–æ—Å: {question}\n–û—Ç–≤–µ—Ç: {answer}\n\n"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    bot.send_message(message.chat.id, response)

    # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    cursor.close()
    connection.close()



# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def get_users():
    connection = sqlite3.connect("tg_bot.db")
    cursor = connection.cursor()
    cursor.execute("SELECT id, first_name, last_name FROM users WHERE role = '—Å–æ—Ç—Ä—É–¥–Ω–∏–∫'")
    users = cursor.fetchall()
    cursor.close()
    connection.close()
    return users


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /add_task
@bot.message_handler(commands=["add_task"])
def add_task(message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user_role["role"] == "—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å":
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        users = get_users()

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        user_data[message.chat.id] = {'users': users}

        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞:")
        show_users(message)
    else:
        # –ï—Å–ª–∏ —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ "—Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å", –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–ø—Ä–µ—Ç–µ –¥–æ—Å—Ç—É–ø–∞
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")



# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def show_users(message):
    users = user_data[message.chat.id]['users']
    markup = types.ReplyKeyboardMarkup(row_width=1)
    for user_id, first_name, last_name in users:
        button_text = f"{first_name} {last_name} (user_id: {user_id})"
        markup.add(types.KeyboardButton(button_text))
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞:", reply_markup=markup)
    bot.register_next_step_handler(message, handle_user_selection)


# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def handle_user_selection(message):
    users = user_data[message.chat.id]['users']
    for user_id, first_name, last_name in users:
        button_text = f"{first_name} {last_name} (user_id: {user_id})"
        if message.text == button_text:
            user_data[message.chat.id]['user_id'] = user_id
            bot.send_message(message.chat.id, f"–í—ã–±—Ä–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {first_name} {last_name} (user_id: {user_id})",
                             reply_markup=types.ReplyKeyboardRemove())
            ask_title(message)


def ask_title(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:")
    bot.register_next_step_handler(message, ask_description)


def ask_description(message):
    user_data[message.chat.id]['title'] = message.text
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:")
    bot.register_next_step_handler(message, ask_deadline)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —Å—Ä–æ–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def ask_deadline(message):
    user_data[message.chat.id]['description'] = message.text
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ (YYYY-MM-DD):")
    bot.register_next_step_handler(message, ask_status)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def ask_status(message):
    try:
        task_data = user_data[message.chat.id]

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Å—Ä–æ–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
        task_data['deadline'] = message.text

        # –°–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞–¥–∞—á–∏
        statuses = ["–í –ø—Ä–æ—Ü–µ—Å—Å–µ", "–í—ã–ø–æ–ª–Ω–µ–Ω–∞", "–û—Ç–ª–æ–∂–µ–Ω–∞", "–û—Ç–º–µ–Ω–µ–Ω–∞", "–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è", "–ù–∞ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏"]

        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞
        markup = types.ReplyKeyboardMarkup(row_width=1)
        for status in statuses:
            markup.add(types.KeyboardButton(status))

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∑–∞–ø—Ä–æ—Å–æ–º –≤—ã–±–æ—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞
        bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –∏–∑ —Å–ø–∏—Å–∫–∞:", reply_markup=markup)
        bot.register_next_step_handler(message, save_task)

    except Exception as e:
        # –í —Å–ª—É—á–∞–µ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è –æ—à–∏–±–∫–∏, —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        bot.send_message(message.chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
def save_task(message):
    try:
        task_data = user_data[message.chat.id]

        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        connection = sqlite3.connect("tg_bot.db")
        cursor = connection.cursor()

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ –≤ —Ç–∞–±–ª–∏—Ü—É tasks
        cursor.execute("INSERT INTO tasks (user_id, title, description, deadline, status) VALUES (?, ?, ?, ?, ?)",
                       (task_data['user_id'], task_data['title'], task_data['description'], task_data['deadline'], message.text))
        connection.commit()

        # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        cursor.close()
        connection.close()

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± —É—Å–ø–µ—à–Ω–æ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏
        bot.send_message(message.chat.id, "–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!", reply_markup=types.ReplyKeyboardRemove())

    except Exception as e:
        # –í —Å–ª—É—á–∞–µ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—è –æ—à–∏–±–∫–∏, —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        bot.send_message(message.chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /menu
@bot.message_handler(commands=['menu'])
def menu(message):
    global show_menu
    show_menu = True
    send_menu(message.chat.id)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–Ω—é
def send_menu(chat_id):
    markup = types.ReplyKeyboardMarkup(row_width=2)
    tasks_button = types.KeyboardButton('/tasks')
    events_button = types.KeyboardButton('/events')
    contacts_button = types.KeyboardButton('/contacts')
    faq_button = types.KeyboardButton('/faq')
    markup.add(tasks_button, events_button, contacts_button, faq_button)

    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é:", reply_markup=markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ú–µ–Ω—é"
@bot.message_handler(func=lambda message: message.text == '–ú–µ–Ω—é')
def handle_menu(message):
    send_menu(message.chat.id)


@bot.message_handler(func=lambda message: True)
def handle_invalid_command(message):
    bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."
                                      "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
def track_new_tasks():
    connection = sqlite3.connect("tg_bot.db")
    cursor = connection.cursor()

    # –ó–∞–ø—Ä–æ—Å –¥–ª—è –≤—ã–±–æ—Ä–∫–∏ –Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
    cursor.execute(f"SELECT * FROM tasks WHERE user_id = {user_role['user_id']} AND status = '–ù–æ–≤–∞—è'")
    new_tasks = cursor.fetchall()

    cursor.close()
    connection.close()

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á–∞—Ö
    for task in new_tasks:
        task_info = f" *–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞:*\n\n*–ù–∞–∑–≤–∞–Ω–∏–µ:* {task[2]}\n\n_{task[3]}_\n\n*–°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:* {task[4]}\n\n"
        bot.send_message(user_role['tg_id'], task_info, parse_mode="Markdown")




bot.polling(none_stop=True)